import java.util.ArrayList;

public class DoNow15 {
    /*
    // version 1: does not use generics: unsafe
    public static void populate(ArrayList L) {
	L.add(5);
	L.add(10);
	L.add(1);
	L.add(0);
	// L.add("abe"); still runs
    }
    
    
    //version 2: does use generics: safe
    public static void populate(ArrayList<Comparable> L) {
	L.add(5);
	L.add(10);
	L.add(1);
	L.add(0);
	// compiler catches it because not all comparables are integers
    }
    */

    // version 3
    public static void populate(ArrayList<Integer> L) {
	L.add(5);
	L.add(10);
	L.add(1);
	L.add(0);
    }
    /*
    // version 1: unsafe
    public static Comparable max(ArrayList L) {
	Comparable sup = (Comparable) L.get(0);
	for (int i = 1; i < L.size(); i++) {
	    Comparable temp = (Comparable) L.get(i);
	    if (sup.compareTo(temp) < 0) sup = temp;
	}
	return sup;
    }*/

    // version 2: safe
    public static Integer max2(ArrayList<Integer> L) {
	Integer sup = L.get(0);
	for (int i = 1; i < L.size(); i++) 
	    if(sup < L.get(i)) sup = L.get(i);
	return sup;
    }

    public static void reverse(ArrayList<Integer> L) {
	for (int i = 0; i < L.size()/2; i++)
	    L.set(L.size() - i, L.set(i, L.get(L.size() - i)));
    }

    public static void main(String[] args) {
	ArrayList<Integer> L = new ArrayList<Integer>();
	populate(L);
	System.out.println(L);
	System.out.println(max2(L));
	reverse(L);
	System.out.println(L);
    }

}
