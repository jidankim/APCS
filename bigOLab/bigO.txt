Part I
======

Using the  BigO classifications: 
     
    O(1),O(logN),O(N),O(NlogN),O(N^2),O(N^3),O(N!)

to classify the following for both space and time:

a. printing an array
time: O(N)
space: O(1) 

b. printing the first half of an array
time: O(N)
space: O(1)

c. print the contents of a 2 dimensional array
time: O(N^2) 
space: O(1)

d. Computing the sum of the first 3 numbers in an integer array.
time: O(1)
space: O(1)

e. Multiplying two matrices.
time: O(N^2)
space: O(N^2)

Part II
=======
Write a search function whose expected runtime is O(N) and whose
additional space is O(1).

Test cases:
 x = {"cat","hat","mat"};
 linearSearch(x,"hat") -> 1
 linearSearch(x,"Hat") -> -1

// precondition: x != null
// postconditon: returns the index position of the first occurrence of key
//               returns -1 if not found
public static int linearSearch(Object[] x, Object key){





Part III.
========

a. Use BigO notation to classify the runtime of the insertion sort.



b. Use BigO notation to classify the runtime of the bogoSort.





Part IV:
=======
Using the definition of big O, find a C and a k to show that your classification
of the insertion sort is correct.
  

